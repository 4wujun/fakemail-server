#!groovy

buildscript {
	dependencies {
		classpath 'org.springframework:springloaded:1.2.8.RELEASE'
	}
}

plugins {
//	id 'org.liquibase.gradle' version '1.2.4'
	id 'io.spring.dependency-management' version '1.0.5.RELEASE'
	id 'org.springframework.boot' version '2.0.1.RELEASE'
	id 'at.comm_unity.gradle.plugins.jpamodelgen' version '1.1.4'
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'jacoco'

description = "Backend server"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs = [ '-Xlint:deprecation', '-Xlint:unchecked' ]
}

configurations {
	providedRuntime
}

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-cache'
	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile 'org.springframework.boot:spring-boot-starter-mail'
	compile 'org.springframework.boot:spring-boot-starter-validation'
	compile "org.liquibase:liquibase-core:3.6.1"
	compile "org.liquibase.ext:liquibase-hibernate5:3.6"
	compile "org.liquibase.ext:liquibase-javalogger:3.0"
	compile "net.bull.javamelody:javamelody-spring-boot-starter:1.72.0"
	compile "org.subethamail:subethasmtp:3.1.7"
	compile "javax.cache:cache-api"
	compile "org.ehcache:ehcache"
	compile "org.hibernate:hibernate-jcache:5.2.16.Final"
	compile "org.hibernate:hibernate-jpamodelgen"
	compile "org.apache.commons:commons-dbcp2"
	compile "javax.servlet:jstl"
	compile "taglibs:standard:1.1.2"
	compile "org.springframework.boot:spring-boot-devtools"
	compile "org.apache.commons:commons-lang3:3.7"
	runtime "com.h2database:h2"
	runtime "org.mariadb.jdbc:mariadb-java-client"
	compile "com.google.code.findbugs:annotations:3.0.1"
	providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"

	testCompile 'org.springframework.boot:spring-boot-starter-test'
}

jpaModelgen {
	library "org.hibernate:hibernate-jpamodelgen"
}
compileJava.options.compilerArgs += [ "-proc:none" ]
compileTestJava.options.compilerArgs += [ "-proc:none" ]

springBoot {
	buildInfo()
//	executable = true
}

bootRun {
//	addResources = true
}

/*
task('runH2', type: com.bmuschko.gradle.tomcat.tasks.TomcatRun) {
	doFirst {
		System.setProperty('externalConfigurationLocation', "${project.rootDir}/src/main/config/application-h2.properties")
	}
}

task('runMysql', type: com.bmuschko.gradle.tomcat.tasks.TomcatRun) {
	doFirst {
		System.setProperty('externalConfigurationLocation', "${project.rootDir}/src/main/config/application-mysql.properties")
	}
}

tomcat {
	httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
	ajpProtocol  = 'org.apache.coyote.ajp.AjpNio2Protocol'
}
*/

checkstyle {
	configDir = file("${projectDir}/src/config")
	sourceSets = [project.sourceSets.main]
	
}
tasks.withType(Checkstyle) {
	reports {
		xml.enabled = true
		html.enabled = true
	}
}

pmd {
	ruleSetFiles = files("${projectDir}/src/config/pmd.xml")
	ignoreFailures = true
	sourceSets = [project.sourceSets.main]
}
tasks.withType(Pmd) {
	reports {
		xml.enabled = true
		html.enabled = false
	}
}

findbugs {
	excludeFilter = file("${projectDir}/src/config/findbugsExcludeFilter.xml")
	ignoreFailures = true
	sourceSets = [project.sourceSets.main]
}
tasks.withType(FindBugs) {
	reports {
		xml.enabled = true
		html.enabled = false
	}
}

jdepend {
	sourceSets = [project.sourceSets.main]
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = false
	}
}
check.dependsOn jacocoTestReport

jar {
	manifest {
		attributes('Implementation-Title': project.name,
				'Implementation-Version': rootProject.version,
				'Built-By': System.getProperty('user.name'),
				'Built-Date': new Date(),
				'Built-JDK': System.getProperty('java.version'),
				'Built-Gradle': gradle.gradleVersion,
				'Class-Path': configurations.runtime.files.collect { it.name }.join(' ')
		)
	}
}
jar.dependsOn ':frontend:buildClient'

/*
liquibase {
	activities {
		main {
			changeLogFile = "${projectDir}/src/main/resources/liquibase/changelog-master.xml"
			url 'jdbc:mysql://localhost:3306/fakemail_ref?nullNamePatternMatchesAll=true'
			username
			password
			//src/main/resources/liquibase/liquibase.properties
		}
	}
}
*/

eclipse {
	project {
		natures 'org.eclipse.buildship.core.gradleprojectnature'
		natures 'net.sf.eclipsecs.core.CheckstyleNature'
		natures 'ch.acanda.eclipse.pmd.builder.PMDNature'
		buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
		buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
		buildCommand 'ch.acanda.eclipse.pmd.builder.PMDBuilder'
	}
	classpath {
		downloadJavadoc = true
		downloadSources = true
	}
}

bootRun.dependsOn(':frontend:buildClientDev')

